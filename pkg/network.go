/*
Package network is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /root/go/pkg/mod/github.com/openconfig/ygot@v0.32.0/genutil/names.go
using the following YANG input files:
	- base.yang
	- deviation.yang
	- augment.yang
Imported modules were sourced from:
	- ...
*/
package network

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

// UnionInt8 is an int8 type assignable to unions of which it is a subtype.
type UnionInt8 int8

// UnionInt16 is an int16 type assignable to unions of which it is a subtype.
type UnionInt16 int16

// UnionInt32 is an int32 type assignable to unions of which it is a subtype.
type UnionInt32 int32

// UnionInt64 is an int64 type assignable to unions of which it is a subtype.
type UnionInt64 int64

// UnionUint8 is a uint8 type assignable to unions of which it is a subtype.
type UnionUint8 uint8

// UnionUint16 is a uint16 type assignable to unions of which it is a subtype.
type UnionUint16 uint16

// UnionUint32 is a uint32 type assignable to unions of which it is a subtype.
type UnionUint32 uint32

// UnionUint64 is a uint64 type assignable to unions of which it is a subtype.
type UnionUint64 uint64

// UnionFloat64 is a float64 type assignable to unions of which it is a subtype.
type UnionFloat64 float64

// UnionString is a string type assignable to unions of which it is a subtype.
type UnionString string

// UnionBool is a bool type assignable to unions of which it is a subtype.
type UnionBool bool

// UnionUnsupported is an interface{} wrapper type for unsupported types. It is
// assignable to unions of which it is a subtype.
type UnionUnsupported struct {
	Value interface{}
}

var (
	SchemaTree map[string]*yang.Entry
	ΛEnumTypes map[string][]reflect.Type
)

func init() {
	var err error
	initΛEnumTypes()
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " +  err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root: &Device{},
		SchemaTree: uzp,
		Unmarshal: Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn )
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Device represents the /device YANG schema element.
type Device struct {
	Interface	*NetworkDevice_Interface	`path:"interface" module:"network-device"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// GetOrCreateInterface retrieves the value of the Interface field
// or returns the existing field if it already exists.
func (t *Device) GetOrCreateInterface() *NetworkDevice_Interface {
	if t.Interface != nil {
		return t.Interface
	}
	t.Interface = &NetworkDevice_Interface{}
	return t.Interface
}

// GetInterface returns the value of the Interface struct pointer
// from Device. If the receiver or the field Interface is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Device) GetInterface() *NetworkDevice_Interface {
	if t != nil && t.Interface != nil {
		return t.Interface
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Device"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Device.
func (*Device) ΛBelongingModule() string {
	return ""
}


// NetworkDevice_Interface represents the /network-device/interface YANG schema element.
type NetworkDevice_Interface struct {
	Bandwidth	*uint32	`path:"bandwidth" module:"network-device-extensions"`
	Mtu	*uint16	`path:"mtu" module:"network-device"`
	Name	*string	`path:"name" module:"network-device"`
	Priority	*uint8	`path:"priority" module:"network-device"`
	Status	NetworkDevice_Interface_Status_Union	`path:"status" module:"network-device-extensions"`
}

// IsYANGGoStruct ensures that NetworkDevice_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkDevice_Interface) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkDevice_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkDevice_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkDevice_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkDevice_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkDevice_Interface.
func (*NetworkDevice_Interface) ΛBelongingModule() string {
	return "network-device"
}

// NetworkDevice_Interface_Status_Union is an interface that is implemented by valid types for the union
// for the leaf /network-device/interface/status within the YANG schema.
// Union type can be one of [E_NetworkDevice_Interface_Status, UnionString].
type NetworkDevice_Interface_Status_Union interface {
	// Union type can be one of [E_NetworkDevice_Interface_Status, UnionString]
	Documentation_for_NetworkDevice_Interface_Status_Union()
}

// Documentation_for_NetworkDevice_Interface_Status_Union ensures that E_NetworkDevice_Interface_Status
// implements the NetworkDevice_Interface_Status_Union interface.
func (E_NetworkDevice_Interface_Status) Documentation_for_NetworkDevice_Interface_Status_Union() {}

// Documentation_for_NetworkDevice_Interface_Status_Union ensures that UnionString
// implements the NetworkDevice_Interface_Status_Union interface.
func (UnionString) Documentation_for_NetworkDevice_Interface_Status_Union() {}

// To_NetworkDevice_Interface_Status_Union takes an input interface{} and attempts to convert it to a struct
// which implements the NetworkDevice_Interface_Status_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *NetworkDevice_Interface) To_NetworkDevice_Interface_Status_Union(i interface{}) (NetworkDevice_Interface_Status_Union, error) {
	if v, ok := i.(NetworkDevice_Interface_Status_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to NetworkDevice_Interface_Status_Union, unknown union type, got: %T, want any of [E_NetworkDevice_Interface_Status, string]", i, i)
}


// E_NetworkDevice_Interface_Status is a derived int64 type which is used to represent
// the enumerated node NetworkDevice_Interface_Status. An additional value named
// NetworkDevice_Interface_Status_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_NetworkDevice_Interface_Status int64

// IsYANGGoEnum ensures that NetworkDevice_Interface_Status implements the yang.GoEnum
// interface. This ensures that NetworkDevice_Interface_Status can be identified as a
// mapped type for a YANG enumeration.
func (E_NetworkDevice_Interface_Status) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  NetworkDevice_Interface_Status.
func (E_NetworkDevice_Interface_Status) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_NetworkDevice_Interface_Status.
func (e E_NetworkDevice_Interface_Status) String() string {
	return ygot.EnumLogString(e, int64(e), "E_NetworkDevice_Interface_Status")
}

const (
	// NetworkDevice_Interface_Status_UNSET corresponds to the value UNSET of NetworkDevice_Interface_Status
	NetworkDevice_Interface_Status_UNSET E_NetworkDevice_Interface_Status = 0
	// NetworkDevice_Interface_Status_up corresponds to the value up of NetworkDevice_Interface_Status
	NetworkDevice_Interface_Status_up E_NetworkDevice_Interface_Status = 1
	// NetworkDevice_Interface_Status_down corresponds to the value down of NetworkDevice_Interface_Status
	NetworkDevice_Interface_Status_down E_NetworkDevice_Interface_Status = 2
	// NetworkDevice_Interface_Status_testing corresponds to the value testing of NetworkDevice_Interface_Status
	NetworkDevice_Interface_Status_testing E_NetworkDevice_Interface_Status = 3
)


// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_NetworkDevice_Interface_Status": {
		1: {Name: "up"},
		2: {Name: "down"},
		3: {Name: "testing"},
	},
}


var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5a, 0xdf, 0x4f, 0xdb, 0x3e,
		0x10, 0x7f, 0xef, 0x5f, 0x61, 0xf9, 0xf1, 0xfb, 0x4d, 0x47, 0xda, 0x8d, 0xb2, 0xe6, 0x0d, 0x8d,
		0xa1, 0xa1, 0x09, 0x84, 0x00, 0xed, 0x05, 0x55, 0x93, 0x49, 0xaf, 0xc1, 0xa2, 0x75, 0x22, 0xc7,
		0xa1, 0xa0, 0x2d, 0xff, 0xfb, 0x14, 0x27, 0x4d, 0x49, 0xf3, 0xcb, 0x71, 0x80, 0xb6, 0x22, 0x6f,
		0x60, 0xdf, 0xd9, 0xe7, 0xbb, 0xeb, 0xe7, 0xee, 0x63, 0xe7, 0x4f, 0x0f, 0x21, 0x84, 0xf0, 0x05,
		0x59, 0x00, 0xb6, 0x10, 0x9e, 0xc2, 0x23, 0xb5, 0x01, 0x1b, 0xf1, 0xe8, 0x4f, 0xca, 0xa6, 0xd8,
		0x42, 0x83, 0xe4, 0xdf, 0x6f, 0x2e, 0x9b, 0x51, 0x07, 0x5b, 0xc8, 0x4c, 0x06, 0x4e, 0x28, 0xc7,
		0x16, 0x8a, 0x97, 0x90, 0x03, 0x94, 0x09, 0xe0, 0x33, 0x62, 0x43, 0x66, 0x38, 0xb3, 0xc3, 0x5a,
		0xc4, 0xc8, 0x0a, 0x64, 0x37, 0x4b, 0x87, 0x37, 0x37, 0x4d, 0x27, 0x2e, 0x39, 0xcc, 0xe8, 0x53,
		0x6e, 0xa3, 0xcc, 0x66, 0x0c, 0xc4, 0xc6, 0x36, 0x72, 0xfa, 0xda, 0x0d, 0x78, 0x81, 0x8d, 0x6b,
		0x53, 0xe0, 0x79, 0xe9, 0xf2, 0xc8, 0x1a, 0xec, 0xc5, 0xbb, 0x18, 0xc5, 0x82, 0x3f, 0x88, 0x7f,
		0xcc, 0x9d, 0x60, 0x01, 0x4c, 0x60, 0x0b, 0x09, 0x1e, 0x40, 0x89, 0xe0, 0x0b, 0x29, 0x69, 0x54,
		0x4e, 0x2a, 0xcc, 0x8c, 0x84, 0x1b, 0x67, 0xdd, 0x74, 0x74, 0x3a, 0x71, 0x47, 0xd8, 0x74, 0x49,
		0xa7, 0xe2, 0xbe, 0xfc, 0x30, 0x2b, 0x5f, 0xac, 0x45, 0x4b, 0x6c, 0x4c, 0x02, 0x60, 0x96, 0x4c,
		0x97, 0x05, 0x42, 0x25, 0x20, 0x45, 0x81, 0xe9, 0xc3, 0x93, 0x28, 0x31, 0x45, 0x25, 0x48, 0x8d,
		0x83, 0xd5, 0x38, 0x68, 0x65, 0xc1, 0x93, 0x86, 0x97, 0x6a, 0x84, 0x85, 0x33, 0x61, 0x89, 0xcf,
		0x6e, 0x9e, 0x3d, 0x50, 0xf3, 0x58, 0x40, 0x99, 0xf8, 0x3c, 0xac, 0x72, 0x58, 0x12, 0xbf, 0xa3,
		0x0a, 0x91, 0x2b, 0xc2, 0x9c, 0x68, 0xb5, 0xdb, 0xca, 0x03, 0x57, 0x3b, 0x5c, 0x2e, 0x74, 0x4e,
		0x59, 0x6d, 0x64, 0x52, 0xe1, 0x5f, 0x64, 0x1e, 0x40, 0xfe, 0xa7, 0x5d, 0x2a, 0x7f, 0xca, 0x89,
		0x2d, 0xa8, 0xcb, 0x4e, 0xa8, 0x43, 0x85, 0x5f, 0x9e, 0x71, 0x79, 0x5f, 0x81, 0x43, 0x04, 0x7d,
		0x8c, 0xf6, 0x9a, 0x91, 0xb9, 0x0f, 0xb5, 0x5a, 0xa1, 0xa1, 0x70, 0x54, 0xf2, 0xa4, 0x71, 0x54,
		0xd3, 0x34, 0xcd, 0xdd, 0x3b, 0x6e, 0x4f, 0x6f, 0x76, 0xd2, 0x53, 0x93, 0x2f, 0x70, 0x27, 0x5e,
		0x88, 0xa0, 0x1e, 0x9b, 0x22, 0xa1, 0xdd, 0x40, 0xa5, 0xbd, 0x44, 0xa4, 0xed, 0xa0, 0xd1, 0x60,
		0xa4, 0x80, 0x46, 0xa3, 0x9d, 0x45, 0xa3, 0xd1, 0xd7, 0x8f, 0x03, 0x47, 0xe3, 0xe1, 0x60, 0xd4,
		0xa1, 0x11, 0x42, 0x98, 0xc5, 0xf9, 0x5b, 0x03, 0x47, 0x52, 0xaa, 0xc3, 0xa3, 0x3d, 0xc2, 0x23,
		0x5f, 0x70, 0xca, 0x1c, 0x05, 0x3c, 0x1a, 0x54, 0xfc, 0xea, 0xf1, 0x25, 0x11, 0x02, 0x38, 0xab,
		0x85, 0x24, 0x0c, 0xe2, 0xfe, 0xd6, 0xec, 0x8f, 0x27, 0xff, 0xff, 0x5d, 0xce, 0x09, 0x8b, 0xff,
		0xc4, 0x6f, 0x92, 0xb0, 0x1e, 0xa7, 0x2e, 0xa7, 0xe2, 0xb9, 0x3e, 0x69, 0x53, 0xc9, 0x2e, 0x71,
		0xf7, 0x28, 0x71, 0x57, 0x51, 0xeb, 0xcf, 0xe1, 0x11, 0xe6, 0x0a, 0x09, 0x7c, 0xd8, 0xb5, 0xf7,
		0xdb, 0xaf, 0xa7, 0x87, 0xfb, 0x56, 0x4c, 0x8d, 0xed, 0x64, 0x84, 0xf9, 0x81, 0x18, 0xdf, 0x61,
		0xd7, 0x60, 0xa1, 0xa8, 0x10, 0x13, 0x11, 0xf8, 0xf5, 0xd5, 0x2a, 0x91, 0xeb, 0xae, 0xa2, 0xf6,
		0xf1, 0x2a, 0x8a, 0x51, 0x97, 0xa9, 0xf4, 0x5a, 0xe3, 0x0a, 0x99, 0x64, 0xbb, 0xd6, 0xa5, 0x6a,
		0x65, 0x14, 0xb0, 0x60, 0x01, 0x9c, 0x88, 0x6a, 0xd3, 0x72, 0x26, 0x7e, 0x51, 0x90, 0xfd, 0xce,
		0x82, 0x85, 0x3a, 0x20, 0xdc, 0xb8, 0xd7, 0x71, 0x33, 0xaa, 0xaa, 0x21, 0xb5, 0x4c, 0xe9, 0x58,
		0x0f, 0x1b, 0xea, 0x2a, 0x03, 0x79, 0x61, 0xef, 0x2e, 0x59, 0x13, 0xa5, 0x61, 0xa4, 0x24, 0xc0,
		0x17, 0x91, 0x85, 0x4a, 0x6a, 0xa1, 0xa1, 0x7a, 0xee, 0x33, 0x99, 0x97, 0x0d, 0x0e, 0x2d, 0x8d,
		0x57, 0x6e, 0x1c, 0xa4, 0xca, 0xca, 0x74, 0x0b, 0x0d, 0x1b, 0x68, 0x05, 0x5e, 0x04, 0x16, 0x6a,
		0xc7, 0xdd, 0x7a, 0xa9, 0x55, 0xe6, 0x34, 0x4d, 0xb8, 0x4d, 0x63, 0x8e, 0xb3, 0xbe, 0xc0, 0x23,
		0x94, 0x09, 0x60, 0x84, 0xd9, 0xd0, 0xff, 0xf4, 0x5f, 0x7d, 0xce, 0x4c, 0xde, 0xba, 0xea, 0x54,
		0xbe, 0x94, 0x1c, 0x07, 0x4e, 0x84, 0x8f, 0x30, 0x2d, 0x3c, 0x60, 0x4d, 0x51, 0x3a, 0x60, 0x20,
		0xac, 0xb2, 0x07, 0xaa, 0x9c, 0xb7, 0xbb, 0xe2, 0xf4, 0x7e, 0xc5, 0xa9, 0xec, 0x01, 0x2c, 0x15,
		0xa8, 0x7f, 0x08, 0xcb, 0xf9, 0xb6, 0xee, 0x41, 0x6c, 0xbd, 0x39, 0xf8, 0x36, 0xa7, 0x9e, 0x2c,
		0x2d, 0x16, 0xc2, 0x67, 0xab, 0x04, 0x41, 0xe9, 0x0a, 0x88, 0x32, 0x74, 0x0e, 0x0e, 0xb9, 0xa3,
		0xc2, 0x47, 0x1e, 0x70, 0xe4, 0x83, 0xed, 0xb2, 0x69, 0xdd, 0xc2, 0xd5, 0x6d, 0x8e, 0x72, 0x46,
		0x35, 0xc9, 0x2c, 0x8d, 0x0c, 0x6b, 0x9a, 0x69, 0xda, 0x19, 0xa7, 0x9d, 0x79, 0x7a, 0x19, 0xf8,
		0x2a, 0x78, 0x5e, 0xdf, 0x36, 0x15, 0xde, 0x9d, 0x57, 0xbe, 0xe4, 0x6d, 0xe6, 0xc7, 0x91, 0x82,
		0xa8, 0x1a, 0xf5, 0x57, 0xaf, 0x42, 0x5a, 0xc4, 0x4f, 0xf7, 0x4a, 0xa0, 0x35, 0x37, 0xd2, 0xe7,
		0x48, 0x0d, 0xbb, 0x9c, 0xc6, 0xfc, 0xb0, 0x80, 0x13, 0x2b, 0xbf, 0x0c, 0xee, 0x82, 0x5b, 0x5e,
		0xa9, 0x67, 0xd2, 0x6d, 0x0a, 0x2a, 0xc2, 0x52, 0x47, 0x35, 0x9b, 0x51, 0xce, 0x7a, 0xb0, 0x77,
		0xbd, 0x84, 0x5e, 0x90, 0x39, 0x52, 0x5b, 0xaa, 0x83, 0xf7, 0x0f, 0x09, 0xef, 0xac, 0x21, 0x05,
		0x1d, 0x2b, 0xc8, 0x2a, 0xb1, 0x65, 0x0d, 0x74, 0xd7, 0x63, 0xcf, 0x3a, 0x2c, 0x5a, 0x8f, 0x4d,
		0xb7, 0x63, 0xd5, 0x2d, 0xd8, 0x75, 0x2b, 0x96, 0xdd, 0x82, 0x6d, 0x6b, 0xd4, 0x23, 0x4d, 0xf6,
		0xdd, 0x82, 0x85, 0xb7, 0x63, 0xe3, 0x3a, 0xac, 0xbc, 0x59, 0x3d, 0x6a, 0x50, 0xb9, 0x8c, 0xb7,
		0xfa, 0x45, 0x29, 0xb3, 0x77, 0x1d, 0x16, 0xaf, 0xcd, 0xe6, 0xb5, 0x59, 0xbd, 0x5a, 0x21, 0x7f,
		0x87, 0x86, 0x40, 0xeb, 0x96, 0x60, 0xb2, 0x79, 0x4b, 0xc0, 0x98, 0x2b, 0x48, 0x52, 0xe3, 0x0b,
		0x3e, 0xab, 0xf4, 0xed, 0x7b, 0x58, 0x10, 0x8f, 0x48, 0x3a, 0x29, 0xaf, 0x05, 0x96, 0x2e, 0x7f,
		0xe8, 0xc7, 0x5f, 0xc7, 0x1e, 0x54, 0xdd, 0x10, 0x44, 0x71, 0x0f, 0x6c, 0x91, 0x7c, 0x67, 0x80,
		0x2f, 0x62, 0xcd, 0x13, 0xa9, 0xf8, 0x3b, 0x6d, 0x26, 0xb2, 0xfe, 0x5e, 0xdb, 0x1a, 0xff, 0x95,
		0x24, 0x65, 0x99, 0x95, 0x98, 0xfa, 0xa7, 0xe4, 0x01, 0xae, 0x5c, 0x37, 0x5f, 0x3e, 0x37, 0x2d,
		0xc7, 0x2f, 0xa7, 0x32, 0x96, 0xc5, 0x26, 0xc5, 0x86, 0x84, 0xbd, 0xf0, 0x1f, 0x00, 0x00, 0x00,
		0xff, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x3d, 0x13, 0x14, 0x0a, 0x08, 0x2c, 0x00, 0x00,
	}
)


// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
func initΛEnumTypes(){
  ΛEnumTypes = map[string][]reflect.Type{
	"/interface/status": []reflect.Type{
		reflect.TypeOf((E_NetworkDevice_Interface_Status)(0)),
	},
  }
}

