/*
Package test is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /Users/nleiva/go/pkg/mod/github.com/openconfig/ygot@v0.31.0/genutil/names.go
using the following YANG input files:
  - base.yang

Imported modules were sourced from:
  - ...
*/
package test

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

// UnionInt8 is an int8 type assignable to unions of which it is a subtype.
type UnionInt8 int8

// UnionInt16 is an int16 type assignable to unions of which it is a subtype.
type UnionInt16 int16

// UnionInt32 is an int32 type assignable to unions of which it is a subtype.
type UnionInt32 int32

// UnionInt64 is an int64 type assignable to unions of which it is a subtype.
type UnionInt64 int64

// UnionUint8 is a uint8 type assignable to unions of which it is a subtype.
type UnionUint8 uint8

// UnionUint16 is a uint16 type assignable to unions of which it is a subtype.
type UnionUint16 uint16

// UnionUint32 is a uint32 type assignable to unions of which it is a subtype.
type UnionUint32 uint32

// UnionUint64 is a uint64 type assignable to unions of which it is a subtype.
type UnionUint64 uint64

// UnionFloat64 is a float64 type assignable to unions of which it is a subtype.
type UnionFloat64 float64

// UnionString is a string type assignable to unions of which it is a subtype.
type UnionString string

// UnionBool is a bool type assignable to unions of which it is a subtype.
type UnionBool bool

// UnionUnsupported is an interface{} wrapper type for unsupported types. It is
// assignable to unions of which it is a subtype.
type UnionUnsupported struct {
	Value interface{}
}

var (
	SchemaTree map[string]*yang.Entry
	ΛEnumTypes map[string][]reflect.Type
)

func init() {
	var err error
	initΛEnumTypes()
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " + err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root:       &Test{},
		SchemaTree: uzp,
		Unmarshal:  Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn)
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Base_BaseContainer represents the /base/base-container YANG schema element.
type Base_BaseContainer struct {
	BaseContainerLeaf_1 *string `path:"base-container-leaf-1" module:"base"`
	BaseContainerLeaf_2 *int32  `path:"base-container-leaf-2" module:"base"`
}

// IsYANGGoStruct ensures that Base_BaseContainer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Base_BaseContainer) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Base_BaseContainer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Base_BaseContainer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Base_BaseContainer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Base_BaseContainer) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Base_BaseContainer.
func (*Base_BaseContainer) ΛBelongingModule() string {
	return "base"
}

// Test represents the /test YANG schema element.
type Test struct {
	BaseContainer *Base_BaseContainer `path:"base-container" module:"base"`
}

// IsYANGGoStruct ensures that Test implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Test) IsYANGGoStruct() {}

// GetOrCreateBaseContainer retrieves the value of the BaseContainer field
// or returns the existing field if it already exists.
func (t *Test) GetOrCreateBaseContainer() *Base_BaseContainer {
	if t.BaseContainer != nil {
		return t.BaseContainer
	}
	t.BaseContainer = &Base_BaseContainer{}
	return t.BaseContainer
}

// GetBaseContainer returns the value of the BaseContainer struct pointer
// from Test. If the receiver or the field BaseContainer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Test) GetBaseContainer() *Base_BaseContainer {
	if t != nil && t.BaseContainer != nil {
		return t.BaseContainer
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Test) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Test"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Test) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Test) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Test.
func (*Test) ΛBelongingModule() string {
	return ""
}

var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x56, 0xdf, 0x0b, 0xd3, 0x30,
		0x10, 0x7e, 0xef, 0x5f, 0x11, 0xf2, 0xdc, 0xb1, 0x9f, 0xb8, 0xd1, 0xb7, 0xb9, 0x31, 0x04, 0x51,
		0x64, 0x0e, 0x5f, 0x44, 0xe4, 0xac, 0xd7, 0x2e, 0xb8, 0x26, 0x23, 0x49, 0x75, 0x43, 0xfa, 0xbf,
		0x4b, 0xda, 0xae, 0xae, 0x3f, 0xd2, 0xa5, 0x13, 0x04, 0xc1, 0x97, 0xb1, 0xde, 0x7d, 0x77, 0xf7,
		0xdd, 0x7d, 0x97, 0x36, 0x3f, 0x3d, 0x42, 0x08, 0xa1, 0x6f, 0x21, 0x41, 0x1a, 0x10, 0xaa, 0x51,
		0x69, 0xea, 0x17, 0xb6, 0xd7, 0x8c, 0x7f, 0xa5, 0x01, 0x99, 0x96, 0x8f, 0x1b, 0xc1, 0x23, 0x16,
		0xd3, 0x80, 0x4c, 0x4a, 0xc3, 0x96, 0x49, 0x1a, 0x90, 0x22, 0x41, 0x6e, 0xf8, 0x02, 0x0a, 0x47,
		0xa1, 0xe0, 0x1a, 0x18, 0xc7, 0xba, 0xaf, 0x56, 0xa4, 0x81, 0xf3, 0xeb, 0xa8, 0x7a, 0xd9, 0xca,
		0xdc, 0x2c, 0x5f, 0x39, 0xde, 0x49, 0x8c, 0xd8, 0xa5, 0x55, 0xad, 0x56, 0x31, 0xb9, 0x9e, 0x0b,
		0x94, 0xdf, 0xc6, 0xbc, 0x17, 0xa9, 0x0c, 0xb1, 0x33, 0xbe, 0xe0, 0x83, 0xd7, 0x1f, 0x42, 0x1a,
		0x4a, 0xd4, 0x9a, 0x24, 0x07, 0xbe, 0x02, 0xb5, 0x96, 0x71, 0x9a, 0x20, 0xd7, 0x34, 0x20, 0x5a,
		0xa6, 0x68, 0x01, 0xde, 0xa1, 0x7e, 0x33, 0x6b, 0x41, 0xb3, 0x9a, 0x25, 0x6b, 0x74, 0xdd, 0x1c,
		0xbe, 0x45, 0x84, 0xd1, 0x09, 0x21, 0x1a, 0x4d, 0xed, 0xdd, 0x75, 0x6b, 0x72, 0x0b, 0xb3, 0x34,
		0x50, 0x4a, 0x34, 0xb1, 0xb8, 0x6d, 0x52, 0xb9, 0x48, 0x36, 0x44, 0x3a, 0x57, 0x09, 0x07, 0x4b,
		0x39, 0x58, 0xd2, 0x81, 0xd2, 0x76, 0x4b, 0x6c, 0x91, 0xba, 0xca, 0x7d, 0xb8, 0x9e, 0xd1, 0x6d,
		0x66, 0x4a, 0x4b, 0xc6, 0xe3, 0xbe, 0x89, 0xdd, 0x0e, 0xd9, 0xca, 0x73, 0xe3, 0xd5, 0xc1, 0xa9,
		0x73, 0x65, 0x66, 0xcf, 0x6d, 0xda, 0xec, 0xff, 0xa6, 0xfd, 0x9b, 0x9b, 0x96, 0x8b, 0xa9, 0x0d,
		0xfc, 0xf1, 0xb2, 0xcd, 0x7b, 0x20, 0x7b, 0xe0, 0xb1, 0x49, 0xf8, 0xb1, 0xb7, 0xe9, 0xfe, 0xa1,
		0xe7, 0x89, 0xde, 0x30, 0xfe, 0x50, 0x9d, 0x0a, 0xfc, 0x01, 0x4e, 0xa9, 0xa9, 0x3a, 0x9b, 0x2e,
		0x96, 0x8b, 0xd5, 0xfc, 0xc5, 0x62, 0xe5, 0xbb, 0x05, 0xee, 0x24, 0x84, 0x9a, 0x09, 0xbe, 0x65,
		0x31, 0xd3, 0xca, 0xbe, 0x7f, 0xed, 0xb9, 0x61, 0x0c, 0x9a, 0x7d, 0xc7, 0x52, 0xe3, 0x87, 0x41,
		0x99, 0xef, 0xd0, 0x32, 0x5c, 0xfe, 0xa0, 0xe5, 0xe5, 0x5f, 0x6c, 0x39, 0x82, 0x93, 0x72, 0xe8,
		0xd9, 0x7b, 0xce, 0xfb, 0xc9, 0xf5, 0x5d, 0xd6, 0xfb, 0x61, 0x5d, 0x73, 0x2e, 0x34, 0x98, 0x4e,
		0xbb, 0xbf, 0xaf, 0x2a, 0x3c, 0x62, 0x02, 0x67, 0xd0, 0x47, 0xb3, 0xff, 0x63, 0x73, 0x00, 0xc6,
		0xbd, 0x17, 0x9a, 0x22, 0x4a, 0xcb, 0x34, 0xd4, 0xbc, 0x3c, 0x35, 0x2f, 0x41, 0xe1, 0x67, 0xf3,
		0xb3, 0xa9, 0x62, 0xbc, 0x6e, 0x86, 0xc5, 0xbf, 0x92, 0xa3, 0x8d, 0x1b, 0x65, 0x6a, 0x07, 0xdf,
		0x70, 0x2f, 0x44, 0xfb, 0xdd, 0xd1, 0xe4, 0x4b, 0xef, 0x5d, 0x35, 0x52, 0x07, 0x73, 0xf5, 0x2b,
		0xca, 0x79, 0xd9, 0x2f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x64, 0x70,
		0xcc, 0xcd, 0x17, 0x0a, 0x00, 0x00,
	}
)

// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
func initΛEnumTypes() {
	ΛEnumTypes = map[string][]reflect.Type{}
}
